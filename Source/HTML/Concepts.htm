<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title></title>
	</head>
	<body>
	<h3>Patterns and Concepts</h3>
	<p>
        Object oriented systems are composed of a myriad array of objects communicating 
        by sending messages to exposed interfaces. To a large degree, the qualities of 
        an OO design are determined by the structure, organization, and responsibility 
        assignments of the objects in a system.&nbsp; The qualities of a system most 
        affected by structure are flexibility, extensibility, maintainability, and 
        testability.&nbsp; Applications usually meet their demise when the system is 
        determined to be too difficult or costly to change. The symptoms of a dying 
        application are a loss of clearly defined structure,&nbsp;an unclear division 
        of&nbsp;responsibilities in the code,&nbsp;and difficulty&nbsp;testing and troubleshooting the 
        application.&nbsp;&nbsp;</p>
    <p>
        Over the years a series of rules and principles have been discovered and 
        developed to describe well-structured systems.&nbsp; Possibly most important is
        <em>Separation of Concerns</em> – pulling separate aspects of the system like 
        persistence, security, or business logic&nbsp;into separate classes and packages.&nbsp; 
        Another key concept is the combination of highly cohesive classes in a loosely 
        coupled structure. The more highly coupled two components of a system are, the 
        more difficult the system is to maintain, test, and reuse. A class should have a 
        cohesive set of responsibilities in a narrow domain.&nbsp; In other words, 
        simpleton classes that do only one thing are much easier to code and test than
        <em>God</em> classes that take on far too many unrelated responsibilities.&nbsp;</p>
	<p>&nbsp;</p>
	<h4>Separation of Concerns</h4>
	<h4>Services and Dependencies</h4>
	<h4>Dependency Injection</h4>
	<h4>Container</h4>
	<h4>Service Locator</h4>
	<h3>StructureMap Terms</h3>
	<h4>PluginType</h4>
	<p>Object Oriented Design</p>
	<h4>Auto Wiring</h4>
	<p>Every &quot;real&quot; IoC container supports the concept of &quot;Auto Wiring.&quot;&nbsp; Auto 
        Wiring simply means that StructureMap can figure out dependency chains for you.</p>
	<h4>Instance</h4>
	<h4>Scoping</h4>
	<h4>PluginFamily</h4>
	<h4>Profile</h4>
	<h4>Interceptor</h4>
	<h4>PostProcessor</h4>
	</body>
</html>