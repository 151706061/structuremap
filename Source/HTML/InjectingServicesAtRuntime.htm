<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Injecting Services or Mocks at Runtime</title>
	</head>
	<body>
	<h1>Injecting Services, Mocks, and Stubs at Runtime</h1>
	<p>In the beginning (2003), there was attributes and Xml configuration, and I called it good.&nbsp; 
        Then we started to use StructureMap on a real project and quickly realized that 
        it would be very useful if we could override some services with mock objects in 
        our unit tests.&nbsp; In later projects I&#39;ve run into scenarios where it would 
        be valuable to put an object into StructureMap after it was created.&nbsp; Other 
        users have asked for the ability to load assemblies or modules of their system 
        on demand so as to save memory.&nbsp; A major goal of the StructureMap 2.5 
        release has been to greatly extend its capabilities for service registration at 
        runtime.&nbsp; With a very few exceptions, you can now make any and all 
        configuration changes after the first call to ObjectFactory.&nbsp; My 
        recommendation is to use this behavior simply and with caution because it will 
        bypass many of the diagnostic abilities built into StructureMap (i.e. 
        StructureMapDoctor might miss configuration problems introduced outside of the 
        normal configuration).</p>
        
        <h4>Injecting a Service at Runtime</h4>
        <p>In my desktop applications the main form implements some sort of 
            IApplicationShell interface.&nbsp; I&#39;ve found it valuable to place the main form 
            itself into StructureMap, as well as several child controls of the main form as 
            well so that various Controllers, Presenters, and Commands can interact with 
            parts of the main shell.&nbsp; I probably could build the ApplicationShell 
            itself inside of StructureMap, but the child controls like (I&#39;m making this up) 
            IQueryToolBar or IExplorerPane are easiest to create as part of the 
            ApplicationShell and loaded later.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 ApplicationShell\cf0  : \cf4 Form\cf0 , \cf4 IApplicationShell\par ??\cf0     \{\par ??        \par ??    \}}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white;">
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
            <span style="color: #2b91af;">ApplicationShell</span> :
            <span style="color: #2b91af;">Form</span>, <span style="color: #2b91af;">
            IApplicationShell</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
    </div>
<!--EndFragment-->
<p>&nbsp;</p>
        <h4>Injecting a Mock or a Stub at Runtime</h4>
        <h4></h4>
        <h4></h4>
        <h4></h4>
        <h4></h4>
        <h4></h4>
	</body>
</html>