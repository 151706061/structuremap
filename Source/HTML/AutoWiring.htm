<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Auto Wiring</title>
		<link rel="stylesheet" type="text/css" href="style.css" />
		<script type="text/javascript" src="jquery-1.2.6.js"></script>
		<script type="text/javascript" src="structuremap.js"></script>
	</head>
	<body>
        <p>
            The best way to use an IoC container is to allow &quot;Auto Wiring&quot; to do most of the 
            work for you.&nbsp; IoC Containers like StructureMap are an infrastructure 
            concern, and as such, should be isolated from as much of your code as possible.&nbsp; 
            Before examining Auto Wiring in depth, let&#39;s look at a common anti pattern of 
            IoC usage:</p>
        <h2>
            IoC Container Anti-Pattern</h2>
        <p>
            One of the worst, but sadly&nbsp; most common, usages of an IoC container is 
            shown below:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red0\green0\blue255;\red43\green145\blue175;}??\fs20         \cf3 // This is the way to write a Constructor Function with an IoC tool\par ??\cf0         \cf3 // Let the IoC container "inject" services from outside, and keep\par ??\cf0         \cf3 // ShippingScreenPresenter ignorant of the IoC infrastructure\par ??\cf0         \cf4 public\cf0  ShippingScreenPresenter(\cf5 IShippingService\cf0  service, \cf5 IRepository\cf0  repository)\par ??        \{\par ??            _service = service;\par ??            _repository = repository;\par ??        \}\par ??\par ??        \cf3 // FAIL!\par ??\cf0         \cf3 // This is the wrong way to use an IoC container.  Do NOT invoke the container from\par ??\cf0         \cf3 // the constructor function.  This tightly couples the ShippingScreenPresenter to\par ??\cf0         \cf3 // the IoC container in a harmful way.  This class cannot be used in either\par ??\cf0         \cf3 // production or testing without a valid IoC configuration.  Plus, you're writing more\par ??\cf0         \cf3 // code\par ??\cf0         \cf4 public\cf0  ShippingScreenPresenter()\par ??        \{\par ??            _service = \cf5 ObjectFactory\cf0 .GetInstance&lt;\cf5 IShippingService\cf0 &gt;();\par ??            _repository = \cf5 ObjectFactory\cf0 .GetInstance&lt;\cf5 IRepository\cf0 &gt;();\par ??        \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// This is the way to 
                write a Constructor Function with an IoC tool</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Let the IoC container 
                &quot;inject&quot; services from outside, and keep</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// 
                ShippingScreenPresenter ignorant of the IoC infrastructure</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
                ShippingScreenPresenter(<span style="color: #2b91af;">IShippingService</span> 
                service, <span style="color: #2b91af;">IRepository</span> repository)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _service = service;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository = repository;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// FAIL!</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// This is the wrong way 
                to use an IoC container.&nbsp; Do NOT invoke the container from</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// the constructor 
                function.&nbsp; This tightly couples the ShippingScreenPresenter to</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// the IoC container in a 
                harmful way.&nbsp; This class cannot be used in either</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// production or testing 
                without a valid IoC configuration.&nbsp; Plus, you&#39;re writing more</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// code</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
                ShippingScreenPresenter()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _service =
                <span style="color: #2b91af;">ObjectFactory</span>.GetInstance&lt;<span 
                    style="color: #2b91af;">IShippingService</span>&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository =
                <span style="color: #2b91af;">ObjectFactory</span>.GetInstance&lt;<span 
                    style="color: #2b91af;">IRepository</span>&gt;();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<hr />
        <h2>
            Example</h2>
        <p>
            Typically, you’ll try to 
            minimize the number of service locator[LINK] usages in your system to a bare minimum 
            (I found 8 in my current system, but I think I’ll find a way to prune half of 
            those later).&nbsp; Most of the value of an IoC tool is in automatically doing 
            Dependency Injection.&nbsp; I’m working with the new MVC framework at the 
            moment, so it’s a handy sample.&nbsp; Let’s say that we have a Controller class 
            for a typical CRUD screen.&nbsp; That Controller class will generally need to 
            interact with both validation services and the data access functionality of the 
            Repository.&nbsp; Here’s a representative Controller class:-RIGHT: black thin solid; BORDER-TOP: black thin solid; FONT-SIZE: 10pt; BACKGROUND: white; OVERFLOW: scroll; BORDER-LEFT: black thin solid; COLOR: black; BORDER-BOTTOM: black thin solid; FONT-FAMILY: courier new">
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp; <span style="COLOR: blue">public</span> <span style="COLOR: blue">class</span>
                <span style="COLOR: #2b91af">SomeScreenController</span> :
                <span style="COLOR: #2b91af">IController</span></p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="COLOR: blue">private</span>
                <span style="COLOR: blue">readonly</span> <span style="COLOR: #2b91af">
                IRepository</span> _repository;</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="COLOR: blue">private</span>
                <span style="COLOR: blue">readonly</span> <span style="COLOR: #2b91af">
                IValidator</span> _validator;</p>
            <p style="MARGIN: 0px">
                &nbsp;</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="COLOR: green">// SomeScreenController 
                depends on both IRepository and IValidator</span></p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="COLOR: blue">public</span> 
                SomeScreenController(<span style="COLOR: #2b91af">IRepository</span> repository,
                <span style="COLOR: #2b91af">IValidator</span> validator)</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _repository = repository;</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _validator = validator;</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="MARGIN: 0px">
                &nbsp;</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp; }</p>
        </div>
        <p>
            So let’s get StructureMap set up for this SomeScreenController class:</p>
        <div style="BORDER-RIGHT: black thin solid; BORDER-TOP: black thin solid; FONT-SIZE: 10pt; BACKGROUND: white; OVERFLOW: scroll; BORDER-LEFT: black thin solid; COLOR: black; BORDER-BOTTOM: black thin solid; FONT-FAMILY: courier new">
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="COLOR: #2b91af">
                ObjectFactory</span>.Initialize(x =&gt;</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="COLOR: green">// Set up the IValidator</span></p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="COLOR: #2b91af">IValidator</span>&gt;().TheDefaultIsConcreteType&lt;<span 
                    style="COLOR: #2b91af">Validator</span>&gt;();</p>
            <p style="MARGIN: 0px">
                &nbsp;</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="COLOR: green">// Set up the IRepository</span></p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="COLOR: #2b91af">IRepository</span>&gt;().TheDefault.Is.OfConcreteType&lt;<span 
                    style="COLOR: #2b91af">Repository</span>&gt;()</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithCtorArg(<span style="COLOR: #a31515">&quot;connectionString&quot;</span>).EqualToAppSetting(<span 
                    style="COLOR: #a31515">&quot;CONNECTION-STRING&quot;</span>);</p>
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        </div>
        <p>
            You’ll notice that we didn’t make any explicit configuration for the 
            SomeScreenController class, but yet we could now call:</p>
        <div style="BORDER-RIGHT: black thin solid; BORDER-TOP: black thin solid; FONT-SIZE: 10pt; BACKGROUND: white; OVERFLOW: scroll; BORDER-LEFT: black thin solid; COLOR: black; BORDER-BOTTOM: black thin solid; FONT-FAMILY: courier new">
            <p style="MARGIN: 0px">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="COLOR: blue">var</span> 
                controller = <span style="COLOR: #2b91af">ObjectFactory</span>.GetInstance&lt;<span 
                    style="COLOR: #2b91af">SomeScreenController</span>&gt;();</p>
        </div>
        <p>
            and StructureMap will happily create a new instance of the SomeScreenController 
            class by invoking its constructor and passing in a new Validator object and a 
            new Repository object created with the connection string from the App.config 
            file.&nbsp; We didn’t need to tell StructureMap how to construct 
            SomeScreenController because:
        </p>
        <ul>
            <li>StructureMap can look at the constructor function of SomeScreenController and 
                see that it depends on IValidator and IRepository </li>
            <li>StructureMap “knows” about the default way to create and return an IValidator 
                and an IRepository </li>
        </ul>
        <p>
            This feature is known as “auto wiring,” and all the mainstream IoC containers 
            support this feature to some extent or another.&nbsp;
        </p>
        <hr />
        <h2>StructureMap&#39;s Policies for Auto Wiring</h2>
        <p>By default, as long as an object is being created by invoking its constructor 
            function, StructureMap will try to create/resolve/find an object for each 
            non-primitive dependency in the requested concrete type.&nbsp; If StructureMap 
            doesn&#39;t &quot;know&quot; how to find a requested dependency, it will throw an exception.&nbsp; 
            By design, StructureMap cannot auto wire primitive arguments like strings and 
            numbers.&nbsp; The Auto Wiring can be overriden by explicit configuration (this 
            might actually be easier with Xml configuration):</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20                 registry.InstanceOf&lt;\cf3 Rule\cf0 &gt;()\par ??                    .Is.OfConcreteType&lt;\cf3 WidgetRule\cf0 &gt;()\par ??                    .WithName(\cf4 "TheWidgetRule"\cf0 )\par ??                    .CtorDependency&lt;\cf3 IWidget\cf0 &gt;().Is(i =&gt; i.TheInstanceNamed(\cf4 "Yellow"\cf0 ));}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                registry.InstanceOf&lt;<span style="color: #2b91af;">Rule</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .Is.OfConcreteType&lt;<span style="color: #2b91af;">WidgetRule</span>&gt;()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .WithName(<span style="color: #a31515;">&quot;TheWidgetRule&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .CtorDependency&lt;<span style="color: #2b91af;">IWidget</span>&gt;().Is(i =&gt; 
                i.TheInstanceNamed(<span style="color: #a31515;">&quot;Yellow&quot;</span>));</p>
        </div>
<!--EndFragment-->
<p>In the example above, the IWidget dependency of the WidgetRule class is 
    overriden.</p>
        <hr />
        <h4>Object Identity within a Single Request</h4>
        <p>TODO</p>
        <hr />
        <h4>Injecting Arrays of Services</h4>
        <p>TODO</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;\red0\green128\blue0;}??\fs20     \cf3 public\cf0  \cf3 interface\cf0  \cf4 IValidator\par ??\cf0     \{\par ??    \}\par ??\par ??    \cf3 public\cf0  \cf3 class\cf0  \cf4 Validator\cf0  : \cf4 IValidator\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf3 string\cf0  _name;\par ??\par ??        \cf3 public\cf0  Validator(\cf3 string\cf0  name)\par ??        \{\par ??            _name = name;\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf3 override\cf0  \cf3 string\cf0  ToString()\par ??        \{\par ??            \cf3 return\cf0  \cf3 string\cf0 .Format(\cf5 "Name: \{0\}"\cf0 , _name);\par ??        \}\par ??    \}\par ??\par ??    \cf3 public\cf0  \cf3 class\cf0  \cf4 ClassThatUsesValidators\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 readonly\cf0  \cf4 IValidator\cf0 [] _validators;\par ??\par ??        \cf3 public\cf0  ClassThatUsesValidators(\cf4 IValidator\cf0 [] validators)\par ??        \{\par ??            _validators = validators;\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf3 void\cf0  Write()\par ??        \{\par ??            \cf3 foreach\cf0  (\cf4 IValidator\cf0  validator \cf3 in\cf0  _validators)\par ??            \{\par ??                \cf4 Debug\cf0 .WriteLine(validator);\par ??            \}\par ??        \}\par ??    \}\par ??\par ??    [\cf4 TestFixture\cf0 ]\par ??    \cf3 public\cf0  \cf3 class\cf0  \cf4 ValidatorExamples\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf4 Container\cf0  container;\par ??\par ??        [\cf4 SetUp\cf0 ]\par ??        \cf3 public\cf0  \cf3 void\cf0  SetUp()\par ??        \{\par ??            container = \cf3 new\cf0  \cf4 Container\cf0 (x =&gt;\par ??            \{\par ??                x.ForRequestedType&lt;\cf4 IValidator\cf0 &gt;().AddInstances(o =&gt;\par ??                \{\par ??                    o.OfConcreteType&lt;\cf4 Validator\cf0 &gt;().WithCtorArg(\cf5 "name"\cf0 ).EqualTo(\cf5 "Red"\cf0 ).WithName(\cf5 "Red"\cf0 );\par ??                    o.OfConcreteType&lt;\cf4 Validator\cf0 &gt;().WithCtorArg(\cf5 "name"\cf0 ).EqualTo(\cf5 "Blue"\cf0 ).WithName(\cf5 "Blue"\cf0 );\par ??                    o.OfConcreteType&lt;\cf4 Validator\cf0 &gt;().WithCtorArg(\cf5 "name"\cf0 ).EqualTo(\cf5 "Purple"\cf0 ).WithName(\cf5 "Purple"\cf0 );\par ??                    o.OfConcreteType&lt;\cf4 Validator\cf0 &gt;().WithCtorArg(\cf5 "name"\cf0 ).EqualTo(\cf5 "Green"\cf0 ).WithName(\cf5 "Green"\cf0 );\par ??                \});\par ??\par ??                x.ForRequestedType&lt;\cf4 ClassThatUsesValidators\cf0 &gt;().AddInstances(o =&gt;\par ??                \{\par ??                    \cf6 // Define an Instance of ClassThatUsesValidators that depends on AutoWiring\par ??\cf0                     o.OfConcreteType&lt;\cf4 ClassThatUsesValidators\cf0 &gt;().WithName(\cf5 "WithAutoWiring"\cf0 );\par ??\par ??                    \cf6 // Define an Instance of ClassThatUsesValidators that overrides AutoWiring\par ??\cf0                     o.OfConcreteType&lt;\cf4 ClassThatUsesValidators\cf0 &gt;().WithName(\cf5 "ExplicitArray"\cf0 )\par ??                        .TheArrayOf&lt;\cf4 IValidator\cf0 &gt;().Contains(y =&gt;\par ??                        \{\par ??                            y.TheInstanceNamed(\cf5 "Red"\cf0 );\par ??                            y.TheInstanceNamed(\cf5 "Green"\cf0 );\par ??                        \});\par ??                \});\par ??            \});\par ??        \}\par ??\par ??        [\cf4 Test\cf0 ]\par ??        \cf3 public\cf0  \cf3 void\cf0  what_are_the_validators()\par ??        \{\par ??            \cf4 Debug\cf0 .WriteLine(\cf5 "With Auto Wiring"\cf0 );\par ??            container.GetInstance&lt;\cf4 ClassThatUsesValidators\cf0 &gt;(\cf5 "WithAutoWiring"\cf0 ).Write();\par ??            \cf4 Debug\cf0 .WriteLine(\cf5 "================================="\cf0 );\par ??            \cf4 Debug\cf0 .WriteLine(\cf5 "With Explicit Configuration"\cf0 );\par ??            container.GetInstance&lt;\cf4 ClassThatUsesValidators\cf0 &gt;(\cf5 "ExplicitArray"\cf0 ).Write();\par ??        \}\par ??    \}}
-->
        <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">interface</span>
                <span style="color: #2b91af;">IValidator</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                <span style="color: #2b91af;">Validator</span> : <span style="color: #2b91af;">
                IValidator</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
                <span style="color: blue;">readonly</span> <span style="color: blue;">string</span> 
                _name;</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> Validator(<span 
                    style="color: blue;">string</span> name)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _name = name;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">override</span> <span style="color: blue;">string</span> 
                ToString()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                return</span> <span style="color: blue;">string</span>.Format(<span 
                    style="color: #a31515;">&quot;Name: {0}&quot;</span>, _name);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                <span style="color: #2b91af;">ClassThatUsesValidators</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
                <span style="color: blue;">readonly</span> <span style="color: #2b91af;">
                IValidator</span>[] _validators;</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
                ClassThatUsesValidators(<span style="color: #2b91af;">IValidator</span>[] 
                validators)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _validators = validators;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">void</span> Write()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">
                foreach</span> (<span style="color: #2b91af;">IValidator</span> validator
                <span style="color: blue;">in</span> _validators)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: #2b91af;">Debug</span>.WriteLine(validator);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">TestFixture</span>]</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
                <span style="color: #2b91af;">ValidatorExamples</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">private</span>
                <span style="color: #2b91af;">Container</span> container;</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">SetUp</span>]</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">void</span> SetUp()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container =
                <span style="color: blue;">new</span> <span style="color: #2b91af;">Container</span>(x 
                =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">IValidator</span>&gt;().AddInstances(o 
                =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                o.OfConcreteType&lt;<span style="color: #2b91af;">Validator</span>&gt;().WithCtorArg(<span 
                    style="color: #a31515;">&quot;name&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;Red&quot;</span>).WithName(<span 
                    style="color: #a31515;">&quot;Red&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                o.OfConcreteType&lt;<span style="color: #2b91af;">Validator</span>&gt;().WithCtorArg(<span 
                    style="color: #a31515;">&quot;name&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;Blue&quot;</span>).WithName(<span 
                    style="color: #a31515;">&quot;Blue&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                o.OfConcreteType&lt;<span style="color: #2b91af;">Validator</span>&gt;().WithCtorArg(<span 
                    style="color: #a31515;">&quot;name&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;Purple&quot;</span>).WithName(<span 
                    style="color: #a31515;">&quot;Purple&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                o.OfConcreteType&lt;<span style="color: #2b91af;">Validator</span>&gt;().WithCtorArg(<span 
                    style="color: #a31515;">&quot;name&quot;</span>).EqualTo(<span 
                    style="color: #a31515;">&quot;Green&quot;</span>).WithName(<span 
                    style="color: #a31515;">&quot;Green&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                x.ForRequestedType&lt;<span style="color: #2b91af;">ClassThatUsesValidators</span>&gt;().AddInstances(o 
                =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Define an Instance of ClassThatUsesValidators 
                that depends on AutoWiring</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                o.OfConcreteType&lt;<span style="color: #2b91af;">ClassThatUsesValidators</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;WithAutoWiring&quot;</span>);</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
                <span style="color: green;">// Define an Instance of ClassThatUsesValidators 
                that overrides AutoWiring</span></p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                o.OfConcreteType&lt;<span style="color: #2b91af;">ClassThatUsesValidators</span>&gt;().WithName(<span 
                    style="color: #a31515;">&quot;ExplicitArray&quot;</span>)</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                .TheArrayOf&lt;<span style="color: #2b91af;">IValidator</span>&gt;().Contains(y =&gt;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                y.TheInstanceNamed(<span style="color: #a31515;">&quot;Red&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                y.TheInstanceNamed(<span style="color: #a31515;">&quot;Green&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                });</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
                &nbsp;</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
                <span style="color: blue;">void</span> what_are_the_validators()</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                Debug</span>.WriteLine(<span style="color: #a31515;">&quot;With Auto Wiring&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.GetInstance&lt;<span 
                    style="color: #2b91af;">ClassThatUsesValidators</span>&gt;(<span 
                    style="color: #a31515;">&quot;WithAutoWiring&quot;</span>).Write();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                Debug</span>.WriteLine(<span style="color: #a31515;">&quot;=================================&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">
                Debug</span>.WriteLine(<span style="color: #a31515;">&quot;With Explicit 
                Configuration&quot;</span>);</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.GetInstance&lt;<span 
                    style="color: #2b91af;">ClassThatUsesValidators</span>&gt;(<span 
                    style="color: #a31515;">&quot;ExplicitArray&quot;</span>).Write();</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
            <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
        </div>
<!--EndFragment-->
<p>&nbsp;</p>
        <p>&nbsp;</p>
        <hr />
	</body>
</html>