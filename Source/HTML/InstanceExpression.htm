<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>The Instance Expression</title>
	</head>
	<body>
	    <h1>The Instance Expression</h1>
	<p>
        One of the most common tasks in the Registry DSL [LINK] is defining how an 
        Instance will be created.&nbsp; In an effort to standardize the Registry DSL and 
        make the API more predictable and consistent, we have introduced the 
        &quot;InstanceExpression&quot; as a shared
        <a href="http://martinfowler.com/dslwip/ExpressionBuilder.html">Expression 
        Builder</a>.&nbsp; As of 2.5, all operations in the Registry DSL that require 
        the definition of an Instance expose an option to use an InstanceExpression with 
        these options:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;}??\fs20     \cf3 public\cf0  \cf3 interface\cf0  \cf4 IInstanceExpression\cf0 &lt;T&gt; : \cf4 IsExpression\cf0 &lt;T&gt;\par ??    \{\par ??        \cf5 // Attach an Instance object that is configured\par ??\cf0         \cf5 // independently of the DSL\par ??\cf0         \cf3 void\cf0  Instance(\cf4 Instance\cf0  instance);\par ??        \cf3 void\cf0  IsThis(\cf4 Instance\cf0  instance);\par ??        \par ??        \cf5 // Use a pre-built object\par ??\cf0         \cf4 LiteralInstance\cf0  IsThis(T obj);\par ??        \cf4 LiteralInstance\cf0  Object(T theObject);\par ??\par ??        \cf5 // Use a type\par ??\cf0         \cf4 SmartInstance\cf0 &lt;PLUGGEDTYPE&gt; OfConcreteType&lt;PLUGGEDTYPE&gt;() \cf3 where\cf0  PLUGGEDTYPE : T;\par ??        \cf4 ConfiguredInstance\cf0  OfConcreteType(\cf4 Type\cf0  type);\par ??\par ??        \cf5 // Build by a Lambda or an Anonymous Delegate\par ??\cf0         \cf4 ConstructorInstance\cf0 &lt;T&gt; ConstructedBy(\cf4 Func\cf0 &lt;T&gt; func);\par ??        \cf4 ConstructorInstance\cf0 &lt;T&gt; ConstructedBy(\cf4 Func\cf0 &lt;\cf4 IContext\cf0 , T&gt; func);\par ??\par ??        \cf5 // Refer to a named Instance\par ??\cf0         \cf4 ReferencedInstance\cf0  TheInstanceNamed(\cf3 string\cf0  key);\par ??        \cf4 DefaultInstance\cf0  TheDefault();\par ??\par ??        \cf5 // Use a cloned copy of the template\par ??\cf0         \cf4 PrototypeInstance\cf0  PrototypeOf(T template);\par ??\par ??        \cf5 // Cache the template as a binary serialized blob\par ??\cf0         \cf4 SerializedInstance\cf0  SerializedCopyOf(T template);\par ??        \par ??        \cf5 // Load an ASCX control\par ??\cf0         \cf4 UserControlInstance\cf0  LoadControlFrom(\cf3 string\cf0  url);\par ??    \}}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">
            interface</span> <span style="color: #2b91af;">IInstanceExpression</span>&lt;T&gt; :             <span style="color: #2b91af;">IsExpression</span>&lt;T&gt;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Attach an Instance 
            object that is configured</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">/// independently of 
            the DSL.&nbsp; This is an extensibility point</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> Instance(<span 
                style="color: #2b91af;">Instance</span> instance);</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> IsThis(<span 
                style="color: #2b91af;">Instance</span> instance);</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Use a pre-built 
            object</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">LiteralInstance</span> 
            IsThis(T obj);</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">LiteralInstance</span> 
            Object(T theObject);</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Use a type and 
            build with its constructor function</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">SmartInstance</span>&lt;PLUGGEDTYPE&gt; 
            OfConcreteType&lt;PLUGGEDTYPE&gt;() <span style="color: blue;">where</span> 
            PLUGGEDTYPE : T;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">ConfiguredInstance</span> 
            OfConcreteType(<span style="color: #2b91af;">Type</span> type);</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Build by a Lambda 
            or an Anonymous Delegate</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">ConstructorInstance</span>&lt;T&gt; 
            ConstructedBy(<span style="color: #2b91af;">Func</span>&lt;T&gt; func);</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">ConstructorInstance</span>&lt;T&gt; 
            ConstructedBy(<span style="color: #2b91af;">Func</span>&lt;<span 
                style="color: #2b91af;">IContext</span>, T&gt; func);</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Refer to a named 
            Instance</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">ReferencedInstance</span> 
            TheInstanceNamed(<span style="color: blue;">string</span> key);</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">DefaultInstance</span> 
            TheDefault();</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Use a cloned copy 
            of the template</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">PrototypeInstance</span> 
            PrototypeOf(T template);</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Cache the template 
            as a binary serialized blob</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">SerializedInstance</span> 
            SerializedCopyOf(T template);</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: green;">// Load an ASCX 
            control</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: #2b91af;">UserControlInstance</span> 
            LoadControlFrom(<span style="color: blue;">string</span> url);</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
    </div>
<!--EndFragment-->
<p>
    Here&#39;s several examples of how the InstanceExpression is invoked.&nbsp; In the 
    code sample below, the text &quot;**********;&quot; represents a call to an 
    InstanceExpression.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;\red163\green21\blue21;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 InstanceExampleRegistry\cf0  : \cf4 Registry\par ??\cf0     \{\par ??        \cf3 public\cf0  InstanceExampleRegistry()\par ??        \{\par ??            \cf5 // Shortcut for just specifying "use this type -- with auto wiring"\par ??\cf0             ForRequestedType&lt;\cf4 IService\cf0 &gt;().TheDefaultIsConcreteType&lt;\cf4 RemoteService\cf0 &gt;();\par ??            \par ??            \cf5 // Set the default Instance of a PluginType\par ??\cf0             ForRequestedType&lt;\cf4 IService\cf0 &gt;().TheDefault.Is.OfConcreteType&lt;\cf4 RemoteService\cf0 &gt;();\par ??            \par ??            \cf5 // Add an additional Instance of a PluginType\par ??\cf0             InstanceOf&lt;\cf4 IService\cf0 &gt;().Is.OfConcreteType&lt;\cf4 RemoteService\cf0 &gt;();\par ??\par ??            \cf5 // Add multiple additional Instances of a PluginType\par ??\cf0             ForRequestedType&lt;\cf4 IService\cf0 &gt;().AddInstances(x =&gt;\par ??            \{\par ??                x.ConstructedBy(() =&gt; \cf3 new\cf0  \cf4 ColorService\cf0 (\cf6 "Red"\cf0 ));\par ??\par ??                x.OfConcreteType&lt;\cf4 RemoteService\cf0 &gt;();\par ??\par ??                x.Object(\cf3 new\cf0  \cf4 ColorService\cf0 (\cf6 "Red"\cf0 ));\par ??            \});\par ??\par ??            \cf5 // Use the InstanceExpression to define the default Instance\par ??\cf0             \cf5 // of a PluginType within a Profile\par ??\cf0             CreateProfile(\cf6 "Connected"\cf0 , x =&gt;\par ??            \{\par ??                x.Type&lt;\cf4 IService\cf0 &gt;().Is.OfConcreteType&lt;\cf4 RemoteService\cf0 &gt;();\par ??            \});\par ??        \}\par ??    \}}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">class</span>
            <span style="color: #2b91af;">InstanceExampleRegistry</span> :
            <span style="color: #2b91af;">Registry</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
            InstanceExampleRegistry()</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: green;">// Set the default Instance of a PluginType</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
                style="color: #2b91af;">IService</span>&gt;().TheDefault.Is.**********;</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: green;">// Add an additional Instance of a PluginType</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InstanceOf&lt;<span 
                style="color: #2b91af;">IService</span>&gt;().Is.**********;</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: green;">// Add multiple additional Instances of a PluginType</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
                style="color: #2b91af;">IService</span>&gt;().AddInstances(x =&gt;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.**********;</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.**********;</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.**********;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        <p style="margin: 0px;">
            &nbsp;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: green;">// Use the InstanceExpression to define the default 
            Instance</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: green;">// of a PluginType within a Profile</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CreateProfile(<span 
                style="color: #a31515;">&quot;Connected&quot;</span>, x =&gt;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.Type&lt;<span style="color: #2b91af;">IService</span>&gt;().Is.**********;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
    </div>
<!--EndFragment-->
<p>
    &nbsp;</p>
<h2>
    Building Concrete Types with the SmartInstance</h2>
    
<p>We received a lot of feedback on the Registry DSL introduced in 2.0.&nbsp; 
    Because of that feedback, StructureMap 2.5 contains a new feature called the 
    SmartInstance that is just a better Fluent Interface for specifying constructor 
    and setter arguments and dependencies of a concrete type.&#160; The main 
    complaint with the 2.0 API was that SetProperty() is overloaded to mean either 
    setter or constructor arguments.&nbsp; The underlying mechanisms in StructureMap 
    stores the information the same way, but the API was causing real confusion.&nbsp; 
    The SmartInstance API is designed to eliminate the confusion over constructor vs 
    setter arguments, and also to take advantage of newer .Net 3.5 features.</p>
<h4>Designating the Type</h4>
<p>The first step is to define the actual concrete type of this Instance by using 
    the OfConcreteType&lt;T&gt;() method on InstanceExpression to start the definition of 
    a SmartInstance.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;}??\fs20             \par ??            \cf3 // Add an additional Instance of a PluginType\par ??\cf0             InstanceOf&lt;\cf4 IService\cf0 &gt;().Is.OfConcreteType&lt;\cf4 RemoteService\cf0 &gt;();\par ??}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// Add an additional Instance of a PluginType</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; InstanceOf&lt;<span 
            style="color: #2b91af;">IService</span>&gt;().Is.OfConcreteType&lt;<span 
            style="color: #2b91af;">RemoteService</span>&gt;();</p>
    <p style="margin: 0px;">
        &nbsp;</p>
</div>
<!--EndFragment-->
<h4>Defining primitive constructor arguments</h4>
<p>Primitive arguments like strings or value types (including enumerations) are 
    defined with the WithCtorArg(name) expression.&nbsp; In this example below, the 
    Thing class has several constructor arguments.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20 \par ??        \cf3 public\cf0  Thing(\cf3 int\cf0  count, \cf3 string\cf0  name, \cf3 double\cf0  average, \cf4 Rule\cf0  rule)\par ??        \{\par ??            _count = count;\par ??            _name = name;\par ??            _average = average;\par ??            _rule = rule;\par ??        \}\par ??}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
        Thing(<span style="color: blue;">int</span> count, <span style="color: blue;">
        string</span> name, <span style="color: blue;">double</span> average,
        <span style="color: #2b91af;">Rule</span> rule)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _count = count;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _name = name;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _average = average;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _rule = rule;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
    <p style="margin: 0px;">
        &nbsp;</p>
</div>
<!--EndFragment-->
<p>In order to make a SmartInstance for the &quot;Thing&quot; type, I need to specify values 
    for all of the simple constructor arguments (&quot;count&quot;, &quot;name&quot;, and &quot;average&quot;).&nbsp; 
    That syntax is shown in the sample below taken from a unit test:</p>

<div style="border-right: black thin solid; border-top: black thin solid; font-size: 10pt; background: white; border-left: black thin solid; color: black; border-bottom: black thin solid; font-family: courier new">
  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160; [<span style="color: #2b91af">Test</span>]</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160; <span style="color: blue">public</span> <span style="color: blue">void</span> DeepInstanceTest_with_SmartInstance()</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; assertThingMatches(registry =&gt;</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; {</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; registry.ForRequestedType&lt;<span style="color: #2b91af">Thing</span>&gt;().TheDefault.Is.OfConcreteType&lt;<span style="color: #2b91af">Thing</span>&gt;()</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; <strong>.WithCtorArg(<span style="color: #a31515">&quot;name&quot;</span>).EqualTo(<span style="color: #a31515">&quot;Jeremy&quot;</span>)</strong></p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; .WithCtorArg(<span style="color: #a31515">&quot;count&quot;</span>).EqualTo(4)</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; .WithCtorArg(<span style="color: #a31515">&quot;average&quot;</span>).EqualTo(.333);</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; });</p>

  <p style="margin: 0px">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>
</div>

<p><strong>Defining primitive setter properties</strong></p>
<p>You have additional options for setting a primitive setter property.&nbsp; The 
    simplest approach is to just use a Lambda expression that will be applied to the object as soon as it’s built.&#160; Intellisense and compiler safety are good things, so you might as well use it.&#160; StructureMap now supports optional setter injection, meaning that you no longer need to do the [Setter] attributes in the concrete classes.&#160; If you specify the value of a setter, StructureMap will use that value regardless of whether or not the [Setter] property exists.&#160; The same rule applies to non-primitive setter dependencies.</p>
<p>Let&#39;s say I have a class like this:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 SimplePropertyTarget\par ??\cf0     \{\par ??        \cf3 public\cf0  \cf3 string\cf0  Name \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??        \cf3 public\cf0  \cf3 int\cf0  Age \{ \cf3 get\cf0 ; \cf3 set\cf0 ; \}\par ??    \}}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">
        class</span> <span style="color: #2b91af;">SimplePropertyTarget</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
        <span style="color: blue;">string</span> Name { <span style="color: blue;">get</span>;
        <span style="color: blue;">set</span>; }</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
        <span style="color: blue;">int</span> Age { <span style="color: blue;">get</span>;
        <span style="color: blue;">set</span>; }</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
</div>
<!--EndFragment-->
<p>To set the setter properties in the configuration I can use the 
    SetProperty(Action&lt;T&gt;) expression:</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Overriding Constructor Dependencies</strong> – Only when you want to override the auto wiring behavior.&#160; I’ve chosen to use a <a href="http://martinfowler&nbsp;&nbsp;&nbsp; }</p>
    </div>
<!--EndFragment-->
<p>To set the setter properties in the configuration I can use the 
    SetProperty(Action&lt;T&gt;) expression:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (x =&gt;\par ??            \{\par ??                x.ForConcreteType&lt;\cf4 SimplePropertyTarget\cf0 &gt;().Configure\par ??                    .SetProperty(target =&gt;\par ??                    \{\par ??                        target.Name = \cf5 "Max"\cf0 ;\par ??                        target.Age = 4;\par ??                    \});\par ??            \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">var</span> container = <span style="color: blue;">new</span>
        <span style="color: #2b91af;">Container</span>(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.ForConcreteType&lt;<span style="color: #2b91af;">SimplePropertyTarget</span>&gt;().Configure</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .SetProperty(target =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        target.Name = <span style="color: #a31515;">&quot;Max&quot;</span>;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        target.Age = 4;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        });</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
</div>
<!--EndFragment-->
<p>You may not want the string values of sett&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
    </div>
<!--EndFragment-->
<p>You may not want the string values of setter properties embedded directly in the 
    Registry classes.&nbsp; Instead, you may want to keep configuration data like 
    connection strings and file paths in the AppSettings[LINK] or another source.&nbsp; 
    In that case, you can use the WithProperty() method instead like this:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (x =&gt;\par ??            \{\par ??                x.ForConcreteType&lt;\cf4 SimplePropertyTarget\cf0 &gt;().Configure\par ??                    .WithProperty(o =&gt; o.Name).EqualToAppSetting(\cf5 "name"\cf0 )\par ??                    .WithProperty(o =&gt; o.Age).EqualToAppSetting(\cf5 "age"\cf0 );\par ??\par ??            \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">var</span> container = <span style="color: blue;">new</span>
        <span style="color: #2b91af;">Container</span>(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.ForConcreteType&lt;<span style="color: #2b91af;">SimplePropertyTarget</span>&gt;().Configure</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithProperty(o =&gt; o.Name).EqualToAppSetting(<span style="color: #a31515;">&quot;name&quot;</span>)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithProperty(o =&gt; o.Age).EqualToAppSetting(<span style="color: #a31515;">&quot;age&quot;</span>);</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
</div>
<!--EndFragment-->
<p>The EqualToAppSetting(key) method will locate a value from the AppSettings 
    section of the current AppDomain&#39;s App.Config file.</p>
<p>&nbsp;</p>
<h4>Overriding Constructor or Setter Dependencies</h4>
<p>Sometimes you may want to override the auto wiring[LINK] behavior and explicitly 
    define the dependencies of a concrete object inline.&nbsp; The SmartInstance 
    expression uses the CtorDependency and SetterDependency methods to define a 
    dependency.&nbsp; These methods use an InstanceExpression as a
    <a href="http://martinfowler.com/dslwip/NestedClosure.html">Nested Closure</a> for defining 
    an Instance for a child dependency.</p>
<p>Here&#39;s an example of setting a constructor dependency.&nbsp; </p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20                 registry.InstanceOf&lt;\cf3 Rule\cf0 &gt;()\par ??                    .Is.OfConcreteType&lt;\cf3 WidgetRule\cf0 &gt;()\par ??                    .WithName(\cf4 "TheWidgetRule"\cf0 )\par ??                    .CtorDependency&lt;\cf3 IWidget\cf0 &gt;().Is(i =&gt; i.TheInstanceNamed(\cf4 "Yellow"\cf0 ));}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        registry.InstanceOf&lt;<span style="color: #2b91af;">Rule</span>&gt;()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .Is.OfConcreteType&lt;<span style="color: #2b91af;">WidgetRule</span>&gt;()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithName(<span style="color: #a31515;">&quot;TheWidgetRule&quot;</span>)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .CtorDependency&lt;<span style="color: #2b91af;">IWidget</span>&gt;().Is(i =&gt; 
        i.TheInstanceNamed(<span style="color: #a31515;">&quot;Yellow&quot;</span>));</p>
    <p style="margin: 0px;">
        &nbsp;</p>
</div>
<!--EndFragment-->
<p>The Lambda expression inside of &quot;CtorDependency().Is()&quot; is another 
    InstanceExpression, so all the normal options for defining an Instance are 
    available.&nbsp; Please note that I just specified the type of constructor 
    argument in the call to CtorDependency&lt;T&gt;() above.&nbsp; If you have more than 
    one constructor argument of the same type, you&#39;ll need to specify the name of 
    the constructor argument with the CtorDependency&lt;T&gt;(argumentName) method.</p>
<p>Here&#39;s an example of configuring a setter dependency inline:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20                 registry.ForRequestedType&lt;\cf3 Thing\cf0 &gt;().TheDefault.Is.OfConcreteType&lt;\cf3 Thing\cf0 &gt;()\par ??                    .WithCtorArg(\cf4 "name"\cf0 ).EqualTo(\cf4 "Jeremy"\cf0 )\par ??                    .WithCtorArg(\cf4 "count"\cf0 ).EqualTo(4)\par ??                    .WithCtorArg(\cf4 "average"\cf0 ).EqualTo(.333)\par ??                    .SetterDependency&lt;\cf3 Rule\cf0 &gt;().Is(x =&gt;\par ??                    \{\par ??                        x.OfConcreteType&lt;\cf3 WidgetRule\cf0 &gt;().SetterDependency&lt;\cf3 IWidget\cf0 &gt;().Is(\par ??                            c =&gt; c.OfConcreteType&lt;\cf3 ColorWidget\cf0 &gt;().WithCtorArg(\cf4 "color"\cf0 ).EqualTo(\cf4 "yellow"\cf0 ));\par ??                    \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        registry.ForRequestedType&lt;<span style="color: #2b91af;">Thing</span>&gt;().TheDefault.Is.OfConcreteType&lt;<span 
            style="color: #2b91af;">Thing</span>&gt;()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithCtorArg(<span style="color: #a31515;">&quot;name&quot;</span>).EqualTo(<span 
            style="color: #a31515;">&quot;Jeremy&quot;</span>)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithCtorArg(<span style="color: #a31515;">&quot;count&quot;</span>).EqualTo(4)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithCtorArg(<span style="color: #a31515;">&quot;average&quot;</span>).EqualTo(.333)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .SetterDependency&lt;<span style="color: #2b91af;">Rule</span>&gt;().Is(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.OfConcreteType&lt;<span style="color: #2b91af;">WidgetRule</span>&gt;().SetterDependency&lt;<span 
            style="color: #2b91af;">IWidget</span>&gt;().Is(</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        c =&gt; c.OfConcreteType&lt;<span style="color: #2b91af;">ColorWidget</span>&gt;().WithCtorArg(<span 
            style="color: #a31515;">&quot;color&quot;</span>).EqualTo(<span 
            style="color: #a31515;">&quot;yellow&quot;</span>));</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        });</p>
</div>
<!--EndFragment-->
<p>Again, you might need to specify the specific setter property instead of just rel</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p><strong>Overriding Setter Dependencies</strong> – Setter dependencies (non-primitive types) are specified much like constructor arguments.&#160; Your options are to say:&#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
                });</p>
    </div>
<!--EndFragment-->
<p>Again, you might need to specify the specific setter property instead of just 
    relying on StructureMap finding the correct property.&nbsp; In this case, you 
    can use an Expression to specify the property:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (x =&gt;\par ??            \{\par ??                x.ForConcreteType&lt;\cf4 ClassWithWidgetProperty\cf0 &gt;().Configure\par ??                    .SetterDependency&lt;\cf4 IWidget\cf0 &gt;(o =&gt; o.Widget).Is(o =&gt; o.Object(\cf3 new\cf0  \cf4 ColorWidget\cf0 (\cf5 "Red"\cf0 )));\par ??            \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">var</span> container = <span style="color: blue;">new</span>
        <span style="color: #2b91af;">Container</span>(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.ForConcreteType&lt;<span style="color: #2b91af;">ClassWithWidgetProperty</span>&gt;().Configure</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .SetterDependency&lt;<span style="color: #2b91af;">IWidget</span>&gt;(o =&gt; 
        o.Widget).Is(o =&gt; o.Object(<span style="color: blue;">new</span>
        <span style="color: #2b91af;">ColorWidget</span>(<span style="color: #a31515;">&quot;Red&quot;</span>)));</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
</div>
<!--EndFragment-->
<p>&nbsp;</p>
<h4>Array Dependencies</h4>
<p>StructureMap supports Array arguments.&nbsp; An array of dependencies or type T 
    can be defined with the TheArrayOf&lt;T&gt;() method shown below.</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (x =&gt;\par ??            \{\par ??                x.ForRequestedType&lt;\cf4 Processor\cf0 &gt;().TheDefault.Is.OfConcreteType&lt;\cf4 Processor\cf0 &gt;()\par ??                    .WithCtorArg(\cf5 "name"\cf0 ).EqualTo(\cf5 "Jeremy"\cf0 )\par ??                    .TheArrayOf&lt;\cf4 IHandler\cf0 &gt;().Contains(y =&gt;\par ??                    \{\par ??                        y.OfConcreteType&lt;\cf4 Handler1\cf0 &gt;();\par ??                        y.OfConcreteType&lt;\cf4 Handler2\cf0 &gt;();\par ??                        y.OfConcreteType&lt;\cf4 Handler3\cf0 &gt;();\par ??                    \});\par ??            \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">var</span> container = <span style="color: blue;">new</span>
        <span style="color: #2b91af;">Container</span>(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.ForRequestedType&lt;<span style="color: #2b91af;">Processor</span>&gt;().TheDefault.Is.OfConcreteType&lt;<span 
            style="color: #2b91af;">Processor</span>&gt;()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithCtorArg(<span style="color: #a31515;">&quot;name&quot;</span>).EqualTo(<span 
            style="color: #a31515;">&quot;Jeremy&quot;</span>)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .TheArrayOf&lt;<span style="color: #2b91af;">IHandler</span>&gt;().Contains(y =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        y.OfConcreteType&lt;<span style="color: #2b91af;">Handler1</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        y.OfConcreteType&lt;<span style="color: #2b91af;">Handler2</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        y.OfConcreteType&lt;<span style="color: #2b91af;">Handler3</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        });</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
</div>
<!--EndFragment-->
<p>TheArrayOf&lt;T&gt;() method is another Nested Closure that takes in an 
    Action&lt;IInstanceExpression&gt; to configure the child Instance&#39;s in the array.&nbsp; </p>
<p>&nbsp;</p>
    
	</body>
</html>