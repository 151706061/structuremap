<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<html>
	<head>
		<title>Configuring StructureMap</title>
	</head>
	<body>
	    <h1>Configuring StructureMap</h1>
	    
	    
	<p>
        &nbsp;</p>
    <p>
        The first step in using StructureMap is configuring a Container or 
        ObjectFactory.&nbsp; The configuration options have changed more than anything 
        else from the initial releases to StructureMap 2.5.&nbsp; You have three forms 
        of configuration to choose from:</p>
    <ol>
        <li>The Registry DSL</li>
        <li>Xml configuration (StructureMap.config, the App.config file, or named files)</li>
        <li>StructureMap Attributes</li>
    </ol>
    <p>
        The configuration is highly modular and you can mix and match configuration 
        choices within the same Container instance.&nbsp; The strong recommendation is 
        to use the Registry DSL as much as possible, and use the Xml configuration 
        strictly for configuration that absolutely must be external to the code 
        (connection strings, file paths, Url&#39;s, etc.).&nbsp; The attributes are 
        deprecated and largely unnecessary now, but still supported for backwards 
        compatibility.</p>
    <ul>
        <li>Registry - </li>
        <li>StructureMap.config - </li>
        <li>Xml files - </li>
        <li>StructureMapConfiguration - StructureMapConfiguration is a static class that 
            provides an alternative for bootstrapping that was introduced in 2.0.&nbsp; This 
            class has been problematic and confusing in real world usage.&nbsp; At this 
            point, StructureMapConfiguration is deprecated and you are strongly urged to use 
            the ObjectFactory.Initialize() method instead.</li>
    </ul>
    <p>
        &nbsp;</p>
    <h4>
        Initializing the Container</h4>
    <p>
        The recommended mechanism for initializing the Container is the Initialize() 
        method.&nbsp; The Initialize() method is a Nested Closure that acts against an 
        InitializationExpression object.&nbsp; The InitializationExpression has methods 
        for all all the possible configuration directives.</p>
    <p>
        &nbsp;</p>
    <p>
        &nbsp;</p>
    <p>
        &nbsp;</p>
    <p>
        &nbsp;</p>
    <h4>
        Using a Bootstrapper</h4>
    <p>
        &nbsp;</p>
    <p>
        &nbsp;</p>
    <h4>
        The StructureMap.config File</h4>
    <p>
        Historically, StructureMap looked for all of its configuration in a file named 
        &quot;StructureMap.config&quot; file in the ApplicationBase folder.&nbsp; By default, if 
        the StructureMap.config file is found in the ApplicationBase folder, the Xml 
        configuration from StructureMap.config will be applied to the internal container 
        of ObjectFactory.&nbsp; Technically, you could still do all configuration in the 
        StructureMap.config file.&nbsp; In this case, the StructureMap.config file would 
        be read and applied in the first call to any of the ObjectFactory methods that 
        request services.&nbsp; Likewise, StructureMap will not throw any exceptions if 
        the StructureMap.config file cannot be found.</p>
    <p>
        The default behavior can be overriden.&nbsp; First, if you are using the 
        StructureMap.config file, you might want to make the existence of this file 
        mandatory to prevent odd problems from missing configuration:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;\red0\green0\blue255;}??\fs20             \cf3 // This code enforces the existence of the StructureMap.config file\par ??\cf0             \cf3 // Initialize() will throw an exception if the StructureMap.config file\par ??\cf0             \cf3 // cannot be found\par ??\cf0             \cf4 ObjectFactory\cf0 .Initialize(x =&gt;\par ??            \{\par ??                x.UseDefaultStructureMapConfigFile = \cf5 true\cf0 ;\par ??            \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// This code enforces the existence of the 
        StructureMap.config file</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// Initialize() will throw an exception if the 
        StructureMap.config file</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// cannot be found</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">ObjectFactory</span>.Initialize(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.UseDefaultStructureMapConfigFile = <span style="color: blue;">true</span>;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
</div>
<!--EndFragment-->
<p>
    You can also specifically ignore the StructureMap.config file at initialization 
    time so that the StructureMap.config file will never be used:</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;\red163\green21\blue21;}??\fs20             \cf3 ObjectFactory\cf0 .Initialize(x =&gt;\par ??            \{\par ??                x.IgnoreStructureMapConfig = \cf4 true\cf0 ;\par ??                \par ??                x.ForRequestedType&lt;\cf3 IWidget\cf0 &gt;().TheDefault.Is\par ??                    .OfConcreteType&lt;\cf3 DoctorTester\cf0 .\cf3 NumberWidget\cf0 &gt;()\par ??                    .WithCtorArg(\cf5 "age"\cf0 ).EqualToAppSetting(\cf5 "age"\cf0 );\par ??            \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">ObjectFactory</span>.Initialize(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.IgnoreStructureMapConfig = <span style="color: blue;">true</span>;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
</div>
<!--EndFragment-->
<p>
    &nbsp;</p>
<p>
    &nbsp;</p>
<p>
    &nbsp;</p>
<p>
    &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof65001\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 Bootstrapper\cf0  : \cf4 IBootstrapper\par ??\cf0     \{\par ??        \cf3 private\cf0  \cf3 static\cf0  \cf3 bool\cf0  _hasStarted;\par ??\par ??\cf3         #region\cf0  IBootstrapper Members\par ??\par ??        \cf3 public\cf0  \cf3 void\cf0  BootstrapStructureMap()\par ??        \{\par ??            \cf4 ValidationMessages\cf0 .Register();\par ??\par ??            \cf4 FilterTypeRegistry\cf0 .ResetAll();\par ??\par ??            \cf4 ObjectFactory\cf0 .Initialize(x =&gt;\par ??            \{\par ??                x.AddRegistry(\cf3 new\cf0  \cf4 CoreRegistry\cf0 ());\par ??                x.AddRegistry(\cf3 new\cf0  \cf4 SearchRegistry\cf0 ());\par ??                x.AddRegistry(\cf3 new\cf0  \cf4 WebCoreRegistry\cf0 ());\par ??                x.AddRegistry(\cf3 new\cf0  \cf4 WebRegistry\cf0 ());\par ??                x.AddRegistry(\cf3 new\cf0  \cf4 RuleRegistry\cf0 ());\par ??            \});\par ??\par ??            \cf4 ConventionRegistry\cf0 .RegisterFor&lt;\cf4 CultureValue\cf0 , \cf4 CultureValueObjectListConvention\cf0 &gt;();\par ??        \}\par ??\par ??\cf3         #endregion\par ??\par ??\cf0         \cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  Restart()\par ??        \{\par ??            \cf3 if\cf0  (_hasStarted)\par ??            \{\par ??                \cf4 ObjectFactory\cf0 .ResetDefaults();\par ??            \}\par ??            \cf3 else\par ??\cf0             \{\par ??                Bootstrap();\par ??                _hasStarted = \cf3 true\cf0 ;\par ??            \}\par ??        \}\par ??\par ??        \cf3 public\cf0  \cf3 static\cf0  \cf3 void\cf0  Bootstrap()\par ??        \{\par ??            \cf3 new\cf0  \cf4 Bootstrapper\cf0 ().BootstrapStructureMap();\par ??        \}\par ??    \}}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">
        class</span> <span style="color: #2b91af;">Bootstrapper</span> :
        <span style="color: #2b91af;">IBootstrapper</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
        <span style="color: blue;">void</span> BootstrapStructureMap()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">ObjectFactory</span>.Initialize(x =&gt;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.AddRegistry(<span style="color: blue;">new</span>
            <span style="color: #2b91af;">CoreRegistry</span>());</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.AddRegistry(<span style="color: blue;">new</span>
            <span style="color: #2b91af;">SearchRegistry</span>());</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.AddRegistry(<span style="color: blue;">new</span>
            <span style="color: #2b91af;">WebCoreRegistry</span>());</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.AddRegistry(<span style="color: blue;">new</span>
            <span style="color: #2b91af;">WebRegistry</span>());</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.AddRegistry(<span style="color: blue;">new</span>
            <span style="color: #2b91af;">RuleRegistry</span>());</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
    </div>
<!--EndFragment-->
<p style="margin: 0px">
    &nbsp;</p>
    <p style="margin: 0px">
        &nbsp;</p>
    <p style="margin: 0px">
        * need an example of calling this from Global.asax</p>
    <p style="margin: 0px">
        * one of doing from main executable</p>
    <p style="margin: 0px">
        *adding Xml file</p>
    <p style="margin: 0px">
        * the StructureMap.config file</p>
    <p style="margin: 0px">
        * sample Xml file</p>
    <p style="margin: 0px">
        &nbsp;</p>
    <p style="margin: 0px">
        &nbsp;</p>
    <p style="margin: 0px">
        &nbsp;</p>
    <h4 style="margin: 0px">
        Adding Configuration to a Container after Initialization</h4>
    <p style="margin: 0px">
        &nbsp;</p>
    <p style="margin: 0px">
        Sometimes you may want to add additional types and Instances to an existing 
        container.&nbsp; The Configure() method on both ObjectFactory and IContainer is 
        used for this purpose.&nbsp;
    </p>
    <p style="margin: 0px">
        &nbsp;</p>
    <p style="margin: 0px">
        Here&#39;s a scenario.&nbsp; You&#39;re building a composite desktop application, and 
        for performance reasons you want to delay loading the screens and features for a 
        module of the application until the user explicitly activates that module.&nbsp; 
        When the user decides to start using that module, your code needs to immediately 
        add more types and Instances to the already running ObjectFactory.&nbsp; The 
        following code would search an assembly named 
        &quot;MyCompany.MyApp.ExtensionAssembly&quot; for Registry classes.&nbsp; The 
        configuration embedded in these new Registry classes would be added to the 
        Container internal to ObjectFactory.</p>
    <p style="margin: 0px">
        &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green128\blue0;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 // Adding configuration from an extension Assembly\par ??\cf0             \cf3 // after ObjectFactory is already configured\par ??\cf0             \cf4 ObjectFactory\cf0 .Configure(x =&gt;\par ??            \{\par ??                x.Scan(scan =&gt;\par ??                \{\par ??                    scan.Assembly(\cf5 "MyCompany.MyApp.ExtensionAssembly"\cf0 );\par ??                    scan.LookForRegistries();\par ??                \});\par ??            \});}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: green;">// Adding configuration from an extension Assembly</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: green;">// after ObjectFactory is already configured</span></p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: #2b91af;">ObjectFactory</span>.Configure(x =&gt;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            x.Scan(scan =&gt;</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            scan.Assembly(<span style="color: #a31515;">&quot;MyCompany.MyApp.ExtensionAssembly&quot;</span>);</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            scan.LookForRegistries();</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
            });</p>
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
    </div>
<!--EndFragment-->
<p style="margin: 0px">
    &nbsp;</p>
    <p style="margin: 0px">
        &nbsp;</p>
    <h4 style="margin: 0px">
        Using Container independent of ObjectFactory</h4>
    <p style="margin: 0px">
        &nbsp;</p>
    <p style="margin: 0px">
        New to 2.5 is the ability to create an instance of the underlying Container 
        class independent of the static ObjectFactory class (actually, you always could 
        do this, but it&#39;s much easier in 2.5).&nbsp; The IContainer interface has 
        roughly the same methods as ObjectFactory (the only major difference is that 
        ObjectFactory.GetNamedInstance&lt;T&gt;(name) is IContainer.GetInstance&lt;T&gt;(name) )&nbsp; 
        You can build a Container with a single Registry object:</p>
    <p style="margin: 0px">
        &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (\cf3 new\cf0  \cf4 BasicActionRegistry\cf0 ());}
-->
    <div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
        <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <span style="color: blue;">var</span> container = <span style="color: blue;">new</span>
            <span style="color: #2b91af;">Container</span>(<span style="color: blue;">new</span>
            <span style="color: #2b91af;">BasicActionRegistry</span>());</p>
    </div>
<!--EndFragment-->
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    Or more commonly, you can build the Container in a manner very similar to the 
    ObjectFactory.Initialize() method.&nbsp; One of the constructors for Container 
    takes in an Action<ConfigurationExpression>&lt;ConfigurationExpression&gt; expression 
    that can be used to configure the Container in one atomic action like this code 
    below:</p>
<p style="margin: 0px">
    &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red163\green21\blue21;}??\fs20             \cf3 var\cf0  container = \cf3 new\cf0  \cf4 Container\cf0 (x =&gt;\par ??            \{\par ??                x.Scan(scanner =&gt;\par ??                \{\par ??                    scanner.Assembly(\cf5 "StructureMap.Testing.Widget"\cf0 )\par ??                \});\par ??\par ??                x.ForRequestedType&lt;\cf4 Rule\cf0 &gt;().TheDefault.Is.OfConcreteType&lt;\cf4 ColorRule\cf0 &gt;()\par ??                    .WithCtorArg(\cf5 "Color"\cf0 ).EqualTo(\cf5 "Blue"\cf0 );\par ??\par ??\par ??                x.IncludeConfigurationFromConfigFile = \cf3 true\cf0 ;\par ??\par ??                x.AddConfigurationFromXmlFile(\cf5 "ExternalFile.xml"\cf0 );\par ??            \});}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">var</span> container = <span style="color: blue;">new</span>
        <span style="color: #2b91af;">Container</span>(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.Scan(scanner =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        scanner.Assembly(<span style="color: #a31515;">&quot;StructureMap.Testing.Widget&quot;</span>)</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        });</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.ForRequestedType&lt;<span style="color: #2b91af;">Rule</span>&gt;().TheDefault.Is.OfConcreteType&lt;<span 
            style="color: #2b91af;">ColorRule</span>&gt;()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .WithCtorArg(<span style="color: #a31515;">&quot;Color&quot;</span>).EqualTo(<span 
            style="color: #a31515;">&quot;Blue&quot;</span>);</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.IncludeConfigurationFromConfigFile = <span style="color: blue;">true</span>;</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.AddConfigurationFromXmlFile(<span style="color: #a31515;">&quot;ExternalFile.xml&quot;</span>);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
</div>
<!--EndFragment-->
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    The ConfigurationExpression class is a Registry, so you can use all of the 
    Registry DSL in the Lambda expression passed into the Container constructor.&nbsp; 
    In addition to the Registry DSL, you also have these options:</p>
<p style="margin: 0px">
    &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;}??\fs20         \cf3 bool\cf0  IncludeConfigurationFromConfigFile \{ \cf3 set\cf0 ; \}\par ??        \cf3 void\cf0  AddRegistry&lt;T&gt;() \cf3 where\cf0  T : \cf4 Registry\cf0 , \cf3 new\cf0 ();\par ??        \cf3 void\cf0  AddRegistry(\cf4 Registry\cf0  registry);\par ??        \cf3 void\cf0  AddConfigurationFromXmlFile(\cf3 string\cf0  fileName);\par ??        \cf3 void\cf0  AddConfigurationFromNode(\cf4 XmlNode\cf0  node);}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">bool</span> 
        IncludeConfigurationFromConfigFile { <span style="color: blue;">set</span>; }</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> 
        AddRegistry&lt;T&gt;() <span style="color: blue;">where</span> T :
        <span style="color: #2b91af;">Registry</span>, <span style="color: blue;">new</span>();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> 
        AddRegistry(<span style="color: #2b91af;">Registry</span> registry);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> 
        AddConfigurationFromXmlFile(<span style="color: blue;">string</span> fileName);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">void</span> 
        AddConfigurationFromNode(<span style="color: #2b91af;">XmlNode</span> node);</p>
    <p style="margin: 0px;">
        &nbsp;</p>
</div>
<!--EndFragment-->
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    These other options will allow you to add configuration from additional Registry 
    classes, the StructureMap section in the App.config file, or other Xml files.</p>
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    Lastly, you can create a Container directly with a no argument constructor, then 
    use the Inject() methods or later use the Configure() method.</p>
<p style="margin: 0px">
    &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red43\green145\blue175;\red0\green0\blue255;}??\fs20         [\cf3 Test\cf0 ]\par ??        \cf4 public\cf0  \cf4 void\cf0  Add_an_assembly_on_the_fly_and_pick_up_plugins2()\par ??        \{\par ??            \cf4 var\cf0  container = \cf4 new\cf0  \cf3 Container\cf0 ();\par ??            container.Configure(\par ??                registry =&gt;\par ??                \{\par ??                    registry.Scan(x =&gt;\par ??                    \{\par ??                        x.AssemblyContainingType(\cf4 typeof\cf0  (\cf3 IService\cf0 &lt;&gt;));\par ??                        x.AddAllTypesOf(\cf4 typeof\cf0  (\cf3 IService\cf0 &lt;&gt;));\par ??                    \});\par ??                \}\par ??                );\par ??\par ??            \cf3 IList\cf0 &lt;\cf3 IService\cf0 &lt;\cf4 string\cf0 &gt;&gt; instances = container.GetAllInstances&lt;\cf3 IService\cf0 &lt;\cf4 string\cf0 &gt;&gt;();\par ??            instances.Count.ShouldBeGreaterThan(0);\par ??        \}}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [<span style="color: #2b91af;">Test</span>]</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span>
        <span style="color: blue;">void</span> 
        Add_an_assembly_on_the_fly_and_pick_up_plugins2()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: blue;">var</span> container = <span style="color: blue;">new</span>
        <span style="color: #2b91af;">Container</span>();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; container.Configure(</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        registry =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        registry.Scan(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.AssemblyContainingType(<span style="color: blue;">typeof</span> (<span 
            style="color: #2b91af;">IService</span>&lt;&gt;));</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.AddAllTypesOf(<span style="color: blue;">typeof</span> (<span 
            style="color: #2b91af;">IService</span>&lt;&gt;));</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        });</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        }</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        );</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #2b91af;">IList</span>&lt;<span style="color: #2b91af;">IService</span>&lt;<span 
            style="color: blue;">string</span>&gt;&gt; instances = container.GetAllInstances&lt;<span 
            style="color: #2b91af;">IService</span>&lt;<span style="color: blue;">string</span>&gt;&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        instances.Count.ShouldBeGreaterThan(0);</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
</div>
<!--EndFragment-->
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    &nbsp;</p>
<p>
    &nbsp;</p>
<!--
{\rtf1\ansi\ansicpg\lang1024\noproof1252\uc1 \deff0{\fonttbl{\f0\fnil\fcharset0\fprq1 Courier New;}}{\colortbl;??\red0\green0\blue0;\red255\green255\blue255;\red0\green0\blue255;\red43\green145\blue175;\red0\green128\blue0;}??\fs20     \cf3 public\cf0  \cf3 class\cf0  \cf4 WebCoreRegistry\cf0  : \cf4 Registry\par ??\cf0     \{\par ??        \cf3 public\cf0  WebCoreRegistry()\par ??        \{\par ??            \cf5 // This is used as a sort of lightweight ScriptManager in\par ??\cf0             \cf5 // our website application\par ??\cf0             ForRequestedType&lt;\cf4 ICachedSet\cf0 &gt;().TheDefaultIsConcreteType&lt;\cf4 CachedSet\cf0 &gt;()\par ??                .CacheBy(\cf4 InstanceScope\cf0 .Hybrid);\par ??\par ??            ForRequestedType&lt;\cf4 IControlBuilder\cf0 &gt;().TheDefault.Is.OfConcreteType&lt;\cf4 AspNetControlBuilder\cf0 &gt;();\par ??            ForRequestedType&lt;\cf4 IPartialRenderer\cf0 &gt;().TheDefault.Is.OfConcreteType&lt;\cf4 PartialRenderer\cf0 &gt;();\par ??\par ??            Scan(x =&gt;\par ??            \{\par ??                \cf5 // Scan "this" assembly.  In other words, the assembly that \par ??\cf0                 \cf5 // contains the WebCoreRegistry class\par ??\cf0                 x.TheCallingAssembly();\par ??\par ??                x.IncludeNamespaceContainingType&lt;\cf4 AuthenticationContext\cf0 &gt;();\par ??                x.IncludeNamespaceContainingType&lt;\cf4 ISecurityDataService\cf0 &gt;();\par ??\par ??                x.WithDefaultConventions();\par ??            \});\par ??        \}\par ??    \}}
-->
<div style="font-family: Courier New; font-size: 10pt; color: black; background: white; border: black thin solid;">
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> <span style="color: blue;">
        class</span> <span style="color: #2b91af;">WebCoreRegistry</span> :
        <span style="color: #2b91af;">Registry</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <span style="color: blue;">public</span> 
        WebCoreRegistry()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// This is used as a sort of lightweight 
        ScriptManager in</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// our website application</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
            style="color: #2b91af;">ICachedSet</span>&gt;().TheDefaultIsConcreteType&lt;<span 
            style="color: #2b91af;">CachedSet</span>&gt;()</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        .CacheBy(<span style="color: #2b91af;">InstanceScope</span>.Hybrid);</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
            style="color: #2b91af;">IControlBuilder</span>&gt;().TheDefault.Is.OfConcreteType&lt;<span 
            style="color: #2b91af;">AspNetControlBuilder</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ForRequestedType&lt;<span 
            style="color: #2b91af;">IPartialRenderer</span>&gt;().TheDefault.Is.OfConcreteType&lt;<span 
            style="color: #2b91af;">PartialRenderer</span>&gt;();</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Scan(x =&gt;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// Scan &quot;this&quot; assembly.&nbsp; In other words, the 
        assembly that </span>
    </p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: green;">// contains the WebCoreRegistry class</span></p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.TheCallingAssembly();</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.IncludeNamespaceContainingType&lt;<span style="color: #2b91af;">AuthenticationContext</span>&gt;();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.IncludeNamespaceContainingType&lt;<span style="color: #2b91af;">ISecurityDataService</span>&gt;();</p>
    <p style="margin: 0px;">
        &nbsp;</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 
        x.WithDefaultConventions();</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; });</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</p>
    <p style="margin: 0px;">
&nbsp;&nbsp;&nbsp; }</p>
</div>
<!--EndFragment-->
<p>
    &nbsp;</p>
<h4>
    &nbsp;</h4>
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    &nbsp;</p>
<p style="margin: 0px">
    &nbsp;</p>
<h4 style="margin: 0px">
    &nbsp;</h4>
<h4 style="margin: 0px">
    StructureMapConfiguration/h4>
    <p style="margin: 0px">
        &nbsp;</p>
    <p style="margin: 0px">
        &nbsp;</p>
	    
	    
	</body>
</html>